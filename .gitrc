# Everyday Git Commands
# ---------------------
# git-l will list the log of all branches in a gui format
alias git-l="git log --oneline --graph --all --decorate"
# git-reset: will reset all the not staged tracked files
alias git-reset="git reset --hard HEAD && git submodule foreach --recursive git reset --hard HEAD"
# git-clean: will clean the untracked files
alias git-clean="git clean -xfd && git submodule foreach --recursive git clean -xfd"
# git-tag-update : updates the outdated tags (useful when tags are moved)
alias git-tag-update="git submodule foreach --recursive bash -c 'git tag -l | xargs git tag -d' && git submodule foreach --recursive git fetch --tags"
# git-update : will sync the urls of the submodules (also will check for new submodules), and will update (pull) the workspace files
alias git-update="git submodule sync --recursive && git submodule update --recursive --init"
# for each iterator for the submodules
alias git-for='git submodule foreach --recursive'
# git-fetch : fetches all tags and all new changes from remote 
alias git-fetch='git fetch --all --prune --tags; git-for bash -c "git fetch --all --prune --tags"'
# git-fetch-force-next-master: This will sync the next 
alias git-fetch-force-next-master='git-for bash -c "git checkout --detach; git branch -D master && git fetch origin master:master -f; git branch -D next && git fetch origin next:next -f || echo NO NEXT; echo; echo"'

# Git clean stuck LFS files
alias git-clean-lfs='git rm --cached -r . && git reset --hard && git rm .gitattributes && git reset . && git checkout .'

# Git Sweep (reset + clean + update)
alias git-sweep='git-reset && git-clean && git-update'

# Fast Git Aliases
# ----------------
function git_fetch() {
  local branch=$1
  local rest_of_params=${@:2}
  git fetch origin ${branch}:${branch} ${rest_of_params}
}
alias gf='git_fetch'
alias gls='git log --oneline --graph --decorate'
alias glsa='git log --oneline --graph --decorate --all'
alias gst='git status'
alias ga='git add'
alias gc='git commit'
alias gchk='git checkout'
alias gb='git branch'
alias gdiff="git diff"


# Git External Diff Commands
# --------------------------
# @note Make sure that you've this setup in your local user configuration to be applicable
alias gitdiff-rhapsody='yes | git difftool -t rhapsody'


# Git Sync commands
# -----------------
alias git-next="git fetch --all --tags --prune;  git checkout --detach; git fetch origin next:next -f && git checkout next || echo NONEXT;  echo;echo; git-for bash -c 'git fetch --all --tags --prune;  git checkout --detach; git fetch origin next:next -f && git checkout next || echo NONEXT;  echo;echo;'"
alias git-topic="make --directory=~/_scripts/topic-checkout topic-checkout"
alias git-fetch="git fetch --all --prune --tags; git-for git fetch --all --prune --tags"
alias git-status="git submodule foreach --recursive git log --pretty='format:%C(auto)%d' -n 1"

# Git pruning and fixing the repo
# -------------------------------
alias git-prune="git remote prune origin && git repack && git prune-packed && git reflog expire --expire=1.month.ago && git gc --aggressive"

# Git Integration
# ---------------
function print_separator() 
{
    echo 
    echo "------------------------------------------------------------------------"
    echo
}
function git_sync()
{
  # User inputs the 1st branch 
  source_branch=$1
  # User inputs the 2nd branch 
  target_branch=$2
  # User inputs the arifact id for the integration
  artf=$3
  echo "Your integration Artifcat is (${artf})"
  echo "You're going to sync (${source_branch}) --> (${target_branch})"

  print_separator
  # Print the latest next commit message  
  sync_next_to_master_msg="Sync \`next\` into \`master\`"
  echo "[git-next2master]: latest next message is :"
  echo ${sync_next_to_master_msg}

  print_separator
  echo "[git-next2master]: Checking out \`master\`"
  git checkout master
  if [[ $? != 0 ]]; then return $? ; fi 

  # Merging next -> master 
  print_separator
  echo "[git-next2master]: Merging \`next\` --> \`master\`:"
  git merge --no-ff next -m "${sync_next_to_master_msg}

[${artf}]" 
  if [[ $? != 0 ]]; then return $? ; fi 
  
  # Print master commit message 
  print_separator
  echo "[git-next2master]: Now the \`master\` commit message is:"
  git log -n 1
  
  # FF next
  print_separator
  echo "[git-next2master]: Fast forward \`next\` to \`master\`:"
  git checkout next 
  if [[ $? != 0 ]]; then return $? ; fi 
  git merge --ff master 
  if [[ $? != 0 ]]; then return $? ; fi 
  

  # Pushing master (user input) 
  print_separator
  read -p "[git-next2master]: Do you want to push \`next\` and \`master\` to origin? (y/n): " user_answer
  if [[ "${user_answer}" == "y" ]]; then 
    git push origin master 
    if [[ $? != 0 ]]; then return $? ; fi 
    git push origin next 
    if [[ $? != 0 ]]; then return $? ; fi 
  else
    return
  fi
  
  # Success message 
  print_separator
  echo "[git-next2master]: âœ” Success "
}
alias git-next2master="git_sync next master"

function git_checkout_submodule ()
{
  # Parameters
  local repo_path=$1
  local passed_args=${@:2}

  # Color constants
  local GREY='\033[1;30m'
  local YELLOW='\033[1;33m'
  local RED='\033[0;31m'
  local GREEN='\033[0;32m'
  local NC='\033[0m'

  # Git checkout command, capture the ouptut to parse it
  # @note this is disabled to avoid fetching data for 
  #       each repo, this can be done by user using `git-fetch`
  # git fetch --all --prune --tags --quiet
  git checkout --detach > /dev/null 2>&1
  git fetch origin ${passed_args}:${passed_args} > /dev/null 2>&1
  git checkout ${passed_args} > /tmp/output_${USER}.cmd.tmp 2>&1
  ret_value=$?
  ret_string=$( cat /tmp/output_${USER}.cmd.tmp ) 

  # Parse the output of the previous command
  if [[ $ret_string == *"already exists"* ]]; then 
    printf "${YELLOW}[Already exists, pull? ]${NC}"
  elif [[ $ret_string == *"is not a commit and a branch"* ]]; then
    printf "${GREY}[Does not exist]        ${NC}"
  elif [[ $ret_string == *"did not match any file"* ]]; then
    printf "${GREY}[Does not exist]        ${NC}"
  elif [[ $ret_string == *"aborting"* ]]; then
    printf "${RED}[Failed to checkout]    ${NC}"
    return 1
  elif [[ $ret_value == 0 ]]; then
    printf "${GREEN}[Checked out]           ${NC}"
  else
    printf "${RED}[Failure has happened]  ${NC}"
    echo $ret_string
    return 1
  fi

  # Print the repo path
  printf "  -   ${repo_path}\n"

  if [[ -n $DEBUG && $DEBUG -eq 1 ]]; then
    echo "## DEBUG ##"
    echo git checkout ${passed_args}
    cat ~/tmp/output_${USER}.cmd.tmp
    echo
  fi
}


function git_checkout 
{
  # Parameters
  local git_command_per_submodule="bash -c \" source ~/.gitrc && git_checkout_submodule \$displaypath $@\""


  if [[ -n $DEBUG && $DEBUG -eq 1 ]]; then
  echo "$ git submodule foreach --recursive '${git_command_per_submodule}'"
  fi

  # Git command
  git_command="git status"
  
  git submodule --quiet foreach --recursive "$( echo ${git_command_per_submodule} )"

  # git submodule foreach --recursive bash -c "git checkout ${git_command_per_submodule} && echo -e '${GREEN}Successfull checkout.${NC}' || echo -e '${RED}Reference does not exist${NC}'; echo"
}
alias git-checkout="git_checkout"

alias git-tag="~/_scripts/submodule-tag/main.sh"
alias git-branch="~/_scripts/submodule-branch/main.sh"
alias next="git checkout --detach && git fetch origin next:next -f && git checkout next && git-clean && git-reset && git-update "


function git_checkout_pr_submodule ()
{
  # Parameters
  local repo_path=$1
  local passed_args=${@:2}

  # Color constants
  local GREY='\033[1;30m'
  local YELLOW='\033[1;33m'
  local RED='\033[0;31m'
  local GREEN='\033[0;32m'
  local NC='\033[0m'

  # Git checkout command, capture the ouptut to parse it
  # @note this is disabled to avoid fetching data for 
  #       each repo, this can be done by user using `git-fetch`
  # git fetch --all --prune --tags --quiet
  git checkout --detach > /dev/null 2>&1
  git fetch origin ${passed_args}:${passed_args} > /dev/null 2>&1
  git checkout ${passed_args} > /tmp/output_${USER}.cmd.tmp 2>&1
  
  ret_value=$?
  ret_string=$( cat /tmp/output_${USER}.cmd.tmp )
  
  
  # Parse the output of the previous command
  if [[ $ret_string == *"already exists"* ]]; then 
    printf "${YELLOW}[Already exists, pull? ]${NC}"
    # Print the repo path
    printf "                -   ${repo_path}\n"
  elif [[ $ret_string == *"is not a commit and a branch"* ]]; then
    printf "${GREY}[Does not exist]        ${NC}"
    # Print the repo path
    printf "                -   ${repo_path}\n"
  elif [[ $ret_string == *"did not match any file"* ]]; then
    printf "${GREY}[Does not exist]        ${NC}"
    # Print the repo path
    printf "                -   ${repo_path}\n"
  elif [[ $ret_string == *"aborting"* ]]; then
    printf "${RED}[Failed to checkout]    ${NC}"
    # Print the repo path
    printf "                -   ${repo_path}\n"
    return 1
  elif [[ $ret_value == 0 ]]; then
    printf "${GREEN}[Checked out]           ${NC}"
    printf "                -   ${repo_path}\n"
    git merge origin/Master-Integration > /tmp/PRoutput_${USER}.cmd.tmp 2>&1
    ret_PRvalue=$?
    ret_PRstring=$( cat /tmp/PRoutput_${USER}.cmd.tmp ) 
    if [[ $ret_PRvalue == 0 ]]; then
      printf "${GREEN}[Merge Master-Integraton to] ${NC}"
      # Print the repo path
      printf "           -   ${repo_path}  "
      printf "${RED}[Check Merge Conflict if exist ]\n${NC}"
    elif [[ $ret_PRvalue != 0 ]]; then
      printf "${RED}[Fail to Merge Master-Integraton to] ${NC}"
      # Print the repo path
      printf "   -   ${repo_path}\n"
    fi
  else
    printf "${RED}[Failure has happened]  ${NC}"
    # Print the repo path
    printf "            -   ${repo_path}\n"
    echo $ret_string
    return 1
  fi
  


  if [[ -n $DEBUG && $DEBUG -eq 1 ]]; then
    echo "## DEBUG ##"
    echo git checkout ${passed_args}
    cat ~/tmp/output_${USER}.cmd.tmp
    echo
  fi
}


function git_checkout_pr 
{
  # Parameters
  local git_command_per_submodule="bash -c \" source ~/.gitrc && git_checkout_pr_submodule \$displaypath $@\""

  if [[ -n $DEBUG && $DEBUG -eq 1 ]]; then
  echo "$ git submodule foreach --recursive '${git_command_per_submodule}'"
  fi

  # Git command
  git_command="git status"

  git submodule --quiet foreach --recursive "$( echo ${git_command_per_submodule} )"
  
  # git submodule foreach --recursive bash -c "git checkout ${git_command_per_submodule} && echo -e '${GREEN}Successfull checkout.${NC}' || echo -e '${RED}Reference does not exist${NC}'; echo"
}
alias git-checkout-pr="git_checkout_pr"




#
# Simulate Clone
# @brief Simulates the cloning of a fresh copy from the origin
# @param repo_path [in] Relative or abs path for the repo
# @param branch    [in] Branch to be cloned
# 
function sim-clone () {
  local repo_path=$(realpath $1)
  local branch=$2

  # Echo some information
  echo "Clone (${branch}) in Repo (${repo_path})"

  # Remove all things except `.git` folder
  ls | xargs rm -rfv

  # Update `.git` dir
  git fetch --all --tags --prune

  # Run garbage collection
  git gc --aggressive

  # Git reset the repo 
  git reset --hard HEAD

  # Git fetch the latest branch
  git fetch origin ${branch}:${branch} -f

  # Git checkout 
  git checkout next
  
  # Git clean
  git reset --hard HEAD && git submodule foreach --recursive bash -c "git reset --hard HEAD"

  # Git reset
  git clean -xfd && git submodule foreach --recursive bash -c "git clean -xfd"

  # Git update submodules
  git submodule sync --recursive && git submodule update --init --recursive
}

function bg_color () {
  local color=$1
  case ${color} in
    "red")
      printf "\u001b[48;5;1m"
    ;;
    "green")
      printf "\u001b[48;5;2m"
    ;;

    "yellow")
      printf "\u001b[48;5;3m"
    ;;
    
    "blue")
      printf "\u001b[48;5;4m"
    ;;
    
    "magenta")
      printf "\u001b[48;5;5m"
    ;;
    
    "cyan")
      printf "\u001b[48;5;6m"
    ;;
    
    "no")
    printf "\u001b[0m"
    ;;
    
    *)
    printf ""
    ;;
  esac
}

function u_color () {
  local color=$1
  case ${color} in
    "red")
      printf "\033[0;31m"
    ;;
    "green")
      printf "\033[0;32m"
    ;;

    "yellow")
      printf "\033[0;33m"
    ;;
    
    "blue")
      printf "\033[0;34m"
    ;;
    
    "magenta")
      printf "\033[0;35m"
    ;;
    
    "cyan")
      printf "\033[0;36m"
    ;;
    
    "no")
    printf "\033[0m"
    ;;
    
    *)
    printf ""
    ;;
  esac
}

function step_head () {
  # Colors
  local cyan=$( u_color "cyan" )
  local no_color=$( u_color "no" )
  
  # Message format
  local msg=$@
  local msg_formatted=$(  printf "++++ %-40s ++++\n" ${msg} )
  
  # Print the message
  printf "${cyan}${msg_formatted}${no_color}" 
}

function step_foorter () {
  local msg=$1
  printf "%-s40" ${msg}
}


# Git Diff Aliases
# ----------------
alias gitdiff-all='echo "# Staged:"; git diff --name-only --cached; echo "# Unstaged:"; git diff --name-only; echo "# Untracked:"; git ls-files -o; echo;echo ; git submodule foreach --recursive bash -c "echo \"# Staged:\"; git diff --name-only --cached; echo \"# Unstaged:\"; git diff --name-only; echo \"# Untracked:\"; git ls-files -o; echo;echo"'

function gitdiff_unstaged()
{
  timestamp=$( date +%s%N )
  tmpfile="/tmp/gitdiff-${timestamp}.tmp"

  step_head "Unstaged"
  echo
  u_color "yellow"
  git diff --name-only --color=always > ${tmpfile}
  cat ${tmpfile}
  rm -f ${tmpfile}
  u_color "no"
  echo
  echo;echo
}
alias gitdiff-unstaged='gitdiff_unstaged ; git submodule foreach --recursive bash -lc "gitdiff_unstaged"'
alias gitdiff-staged='echo "# Staged:"; git diff --name-only --cached; echo;echo ; git submodule foreach --recursive bash -c "echo \"# Staged:\"; git diff --name-only --cached; echo;echo"'
alias gitdiff-untracked='echo "# Untracked:"; git ls-files -o; echo;echo ; git submodule foreach --recursive bash -c "echo \"# Untracked:\"; git ls-files -o; echo;echo"'


# Depricated 
# ----------
#alias git-integrator-log-after-next='date=$(git log --date=short next -1 | grep "Date" | sed -E "s/Date:\s+//") ; git log --all --after=$date --decorate=short'
#alias git-integrator-log-after-next='date=$(git log --date=short next -1 | grep "Date" | sed -E "s/Date:\s+//") ; git log --all --after=$date --decorate=short'
#date_pattern="'s/Date:\s+//'"
#alias git-integrator-check-commits-from-last-integration='git submodule foreach --recursive bash -c "integration_branch=$(git branch -l -a \"origin/*master\"); if [[ -z \"$integration_branch\" ]]; then integration_branch=$(git branch -l -a \"origin/*next\"); fi; last_integration_date=$(git log $integration_branch --date=short -n 1 | grep \"Date:\" | sed -E $date_pattern); git --no-pager log --all --after=$last_integration_date"'


